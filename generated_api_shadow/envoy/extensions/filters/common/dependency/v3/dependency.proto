syntax = "proto3";

package envoy.extensions.filters.common.dependency.v3;

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.common.dependency.v3";
option java_outer_classname = "DependencyProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Filter dependency specification]

// Dependency specification and string identifier.
message Dependency {
  enum DependencyType {
    HEADER = 0;
    FILTER_STATE_KEY = 1;
    DYNAMIC_METADATA = 2;
  }

  // The kind of dependency.
  DependencyType type = 1;

  // The string identifier for the dependency.
  string name = 2 [(validate.rules).string = {min_len: 1}];
}

// Dependency specification for a filter. For a filter chain to be valid, any
// dependency that is required must be provided by an earlier filter.
message FilterDependencies {
  // A list of dependencies required on the decode path.
  repeated Dependency decode_required = 1;

  // A list of dependencies provided on the encode path.
  repeated Dependency decode_provided = 2;

  // A list of dependencies required on the decode path.
  repeated Dependency encode_required = 3;

  // A list of dependencies provided on the encode path.
  repeated Dependency encode_provided = 4;
}

// Match tree dependencies for a filter. Allows specifying constraints for what
// actions can be used with a specific filter and optionally what part of the
// stream processing the action must be resolved by.
message HTTPMatchDependencies {
  message ResolutionRequirement {
    enum ResolutionStage {
      // The match result can be resolved at any point.
      ANY = 0;

      // The match result must be resolvable before the filter is processing headers.
      HEADERS = 1;

      // The match result must be resolvable before the filter is processing trailers.
      TRAILERS = 2;

      // This match action cannot be resolved at any stage.
      NOT_ALLOWED = 3;
    }

    ResolutionStage decode_required_stage = 1;

    ResolutionStage encode_required_stage = 2;
  }

  // Resolution requirements for each custom filter action. Only filter actions listed as part
  // of this map are permitted for custom filters, while all built in actions are permitted for
  // all filters by default. If a built in action is listed here, requirements can be added to
  // this action, e.g. to disable it or ensuring that it is resoled before a specific part of
  // stream processing.
  map<string, ResolutionRequirement> per_action_resolution_requirement = 1;
}
